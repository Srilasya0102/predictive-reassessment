# -*- coding: utf-8 -*-
"""clusterra.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15XVRFv-59JFVteR6a1UQi3iktP6pOWJ2
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.impute import SimpleImputer
from sklearn.metrics import silhouette_score
from sklearn.decomposition import PCA
from scipy import stats
from sklearn.manifold import TSNE
from sklearn.feature_selection import RFE
from sklearn.ensemble import RandomForestClassifier

# Load the dataset
df = pd.read_csv('/content/customer_segmentation.csv')

# Convert categorical columns to numerical using LabelEncoder
label_encoder = LabelEncoder()
for col in df.select_dtypes(include=['object']).columns:
    df[col] = label_encoder.fit_transform(df[col])

# Handling missing values by imputing
imputer = SimpleImputer(strategy='mean')
df.fillna(df.mean(), inplace=True)

# Detect and handle outliers (you can choose the method)
# For demonstration purpose, let's remove outliers using Z-score method
numerical_cols = ['ID', 'Year_Birth', 'Income', 'Kidhome', 'Teenhome', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts',
                  'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases',
                  'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4',
                  'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']

z_scores = np.abs(stats.zscore(df[numerical_cols]))
threshold = 3
df_clean = df[(z_scores < threshold).all(axis=1)]

# Standardize the data
scaler = StandardScaler()
df_scaled = scaler.fit_transform(df[numerical_cols])
df_scaled = pd.DataFrame(df_scaled, columns=numerical_cols)

# Feature selection
correlation_matrix = df_scaled.corr()

# Select features with high absolute correlation with the target variable
target_correlation = correlation_matrix['Response'].abs().sort_values(ascending=False)
selected_features = target_correlation[1:8].index

# K-means clustering
inertia = []
silhouette_scores = []
for k in range(2, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(df_scaled[selected_features])
    inertia.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(df_scaled[selected_features], kmeans.labels_))

# Elbow method
plt.figure(figsize=(10, 5))
plt.plot(range(2, 11), inertia, marker='o')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.title('Elbow Method')
plt.show()

# Silhouette method
plt.figure(figsize=(10, 5))
plt.plot(range(2, 11), silhouette_scores, marker='o')
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Method')
plt.show()

# Choose the optimal number of clusters based on the methods
optimal_number_of_clusters = 4  # Adjust based on the plots

# Train K-means with the optimal number of clusters
kmeans = KMeans(n_clusters=optimal_number_of_clusters, random_state=42)
kmeans.fit(df_scaled[selected_features])

# Visualize clusters using PCA
pca = PCA(n_components=2)
df_pca = pca.fit_transform(df_scaled[selected_features])
df_pca = pd.DataFrame(df_pca, columns=['PC1', 'PC2'])

plt.figure(figsize=(10, 6))
sns.scatterplot(x='PC1', y='PC2', data=df_pca, hue=kmeans.labels_, palette='viridis', legend='full')
plt.title('Clusters Visualized by PCA')
plt.show()

# Visualize clusters using t-SNE
tsne = TSNE(n_components=2, random_state=42)
df_tsne = tsne.fit_transform(df_scaled[selected_features])

plt.figure(figsize=(10, 6))
sns.scatterplot(x=df_tsne[:, 0], y=df_tsne[:, 1], hue=kmeans.labels_, palette='viridis', legend='full')
plt.title('Clusters Visualized by t-SNE')
plt.show()

cluster_centers = kmeans.cluster_centers_

# Convert centroids to a DataFrame
cluster_df = pd.DataFrame(cluster_centers, columns=selected_features)

# Print summary of cluster characteristics
for i in range(optimal_number_of_clusters):
    print(f"Cluster {i+1} Characteristics:")
    print(cluster_df.iloc[i])
    print("\n")

"""clustering was done basing on targeting customers by consideroing several significant features basing on the transactions ,amounts,regularity etc.,"""

